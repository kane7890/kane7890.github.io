---
layout: post
title:      "Scraping Irregularites"
date:       2019-06-10 14:56:29 +0000
permalink:  scraping_irregularites
---

In working on this first CLI project, I decided to scrape a page that had a 100 entries in it, representing Sports Illustrated's top 100 basketball player prospects for the upcoming 2019 NBA Draft.  I had hoped that the HTML code and the formatting would be in a relatively repeatable patterns.  For example, that the player's name would always be in tag "h4", there would always be the name of a school/club, there would always be a height and weight, etc.  Some irregularities were to be expected: for example, some players did not attend school in the US and they would not have a class year.

When I inspected the HTML page and experimented with Nokogiri, I did find some patterns that repeated,  However, I found that trying to keep different parts of the data linked with each other would take some doing.  For example, each player's name and school/club were usually in a block called  "headline-block" and responded to a .css("div.component.headline-block").  That was fairly easy to parse to obtain the name and school/club.  

Finding and scraping the other player info was not nearly as straightforward in the sense of following a pattern.  The rest of the player's info -- the height/weight, age, last rank, and scouting report-- were under a block called "heading-container" that was on the same tag/indentation level of the headline-block  (Wouldn't it be nice if the heading-container were located under the headline block?) . This heading-container block always came further down  in the HTML code than  the headline-block, but there were a couple of problems: (1) some -- but NOT all -- of the player entries on the original web page had photo images, which would take up another block; (2) probably for formatting and page breaks, there were other blocks in between the headline-block and the headline-container; (3) here were other heading-containers that also had some similar formatting attiributes but no player data or sometimes just an &nbsp character.  This meant that I couldn't just say, scrape the headline-block, move down two elements and always access the heading-container for the player data.  I would have had to iterate to the next element until I reached the next heading-container and then check if it was the "right kind" of heading-container (i.e. one with player data) but that provded to be dificult to figure out using Nokogiri ,css.  

in the end, I decided to read all headline-blocks in one pass and put them into one array then all  heading-containers, ignore out the heading-container blocks that did not contain student data, and put them into a second array of container information.   I wrote a loop that effectively merged the two arrays into one, and used that to instantiate my Player objects.  I realize that this is very far from ideal but I couldn't figure a good way to iterate through elements that were at the same tag/indent level of HTML and that had several different variations in how many blocks and tags came between the first block of player information and the second block of player information.

I also learned a lot about special characters.  For one, I was reminded that what appears as printed as spaces may not be spaces as defined by UNICODE (and Ruby methods).  Some of the "spaces" I encountered in the player data strings were actually the &nbsp (non-breaking space) character.  Ruby's .strip method does not recognize the &nbsp as a "space" so I had to use the .gsub method (the idea was on Stack Overflow, I believe) to strip out the nbsp.
 
Another tricky part was that height was given as a string--sometimes using the "right double quotation mark" character (U+201D) and sometimes using '\"':  there did not appear to be a rhyme or reason to which quotation mark was used whee.  I did not address trying to filter out the two quotes in the height because as I would also have had to convert the "ft-in" notation into inches if I wanted to use the numbers.  I believe that there are better ways to develop an app for really using the height as an integer in, say, specifying a minimum or maximum height for players.

Even the name had one odd quirk.  The last player on the list had, for some unknown reason, a comma, following his last name.  (Maybe the app creating the web page forgot to filter that comma out). The  bottom line is that even web pages that are probably generated and created on the fly still can have irregularities due to page formatting code or even outright errors.  
